package be.kclaes83.accountingassistant.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class DocumentkopAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDocumentkopAllPropertiesEquals(Documentkop expected, Documentkop actual) {
        assertDocumentkopAutoGeneratedPropertiesEquals(expected, actual);
        assertDocumentkopAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDocumentkopAllUpdatablePropertiesEquals(Documentkop expected, Documentkop actual) {
        assertDocumentkopUpdatableFieldsEquals(expected, actual);
        assertDocumentkopUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDocumentkopAutoGeneratedPropertiesEquals(Documentkop expected, Documentkop actual) {
        assertThat(expected)
            .as("Verify Documentkop auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDocumentkopUpdatableFieldsEquals(Documentkop expected, Documentkop actual) {
        assertThat(expected)
            .as("Verify Documentkop relevant properties")
            .satisfies(e -> assertThat(e.getBedrijfsnummer()).as("check bedrijfsnummer").isEqualTo(actual.getBedrijfsnummer()))
            .satisfies(e ->
                assertThat(e.getDocumentNrBoekhoudingsdocument())
                    .as("check documentNrBoekhoudingsdocument")
                    .isEqualTo(actual.getDocumentNrBoekhoudingsdocument())
            )
            .satisfies(e -> assertThat(e.getBoekjaar()).as("check boekjaar").isEqualTo(actual.getBoekjaar()))
            .satisfies(e -> assertThat(e.getDocumentsoort()).as("check documentsoort").isEqualTo(actual.getDocumentsoort()))
            .satisfies(e -> assertThat(e.getDocumentdatum()).as("check documentdatum").isEqualTo(actual.getDocumentdatum()))
            .satisfies(e -> assertThat(e.getBoekingsdatum()).as("check boekingsdatum").isEqualTo(actual.getBoekingsdatum()))
            .satisfies(e -> assertThat(e.getBoekmaand()).as("check boekmaand").isEqualTo(actual.getBoekmaand()))
            .satisfies(e -> assertThat(e.getInvoerdag()).as("check invoerdag").isEqualTo(actual.getInvoerdag()))
            .satisfies(e -> assertThat(e.getInvoertijd()).as("check invoertijd").isEqualTo(actual.getInvoertijd()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDocumentkopUpdatableRelationshipsEquals(Documentkop expected, Documentkop actual) {
        // empty method
    }
}
